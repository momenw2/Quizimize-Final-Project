<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Groups</title>
    <link rel="stylesheet" href="/groupStyle.css" />
  </head>
  <body>
    <div class="container">
      <div class="header">Groups</div>

      <!-- Success/Error Messages -->
      <div id="successMessage" class="success-message"></div>
      <div id="errorMessage" class="error-message"></div>

      <!-- Search & Filter -->
      <div class="controls">
        <input
          type="text"
          id="searchInput"
          placeholder="Search groups..."
          style="flex: 1"
        />
        <select id="filterSelect">
          <option value="all">All</option>
          <option value="JavaScript">JavaScript</option>
          <option value="React">React</option>
          <option value="SQL">SQL</option>
          <option value="Python">Python</option>
        </select>
        <button class="btn btn-primary" onclick="applyFilters()">Search</button>
      </div>

      <!-- Group Actions -->
      <div class="controls">
        <button class="btn btn-primary" onclick="openCreateGroupModal()">
          Create Group
        </button>
        <button class="btn btn-outline" onclick="openJoinGroupModal()">
          Join Group with Code
        </button>
      </div>

      <!-- Group List -->
      <div class="group-grid" id="groupList">
        <div class="loading">Loading groups...</div>
      </div>
    </div>

    <!-- Create Group Modal -->
    <div id="createGroupModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Create New Group</h3>
          <span class="close" onclick="closeCreateGroupModal()">&times;</span>
        </div>
        <form id="createGroupForm">
          <div class="form-group">
            <label for="groupName">Group Name:</label>
            <input
              type="text"
              id="groupName"
              name="name"
              required
              placeholder="Enter group name"
            />
          </div>
          <div class="form-group">
            <label for="groupSpecialization">Specialization:</label>
            <select id="groupSpecialization" name="specialization" required>
              <option value="">Select specialization</option>
              <option value="JavaScript">JavaScript</option>
              <option value="React">React</option>
              <option value="SQL">SQL</option>
              <option value="Python">Python</option>
              <option value="Node.js">Node.js</option>
              <option value="HTML/CSS">HTML/CSS</option>
              <option value="MongoDB">MongoDB</option>
              <option value="Express.js">Express.js</option>
            </select>
          </div>
          <div class="modal-actions">
            <button
              type="button"
              class="btn btn-outline"
              onclick="closeCreateGroupModal()"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">Create Group</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Join Group Modal -->
    <div id="joinGroupModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Join Group with Code</h3>
          <span class="close" onclick="closeJoinGroupModal()">&times;</span>
        </div>
        <form id="joinGroupForm">
          <div class="form-group">
            <label for="groupCode">Group Code:</label>
            <input
              type="text"
              id="groupCode"
              name="code"
              required
              placeholder="Enter group code"
              maxlength="8"
              style="text-transform: uppercase"
            />
            <small
              >Enter the 8-character group code provided by the group
              admin</small
            >
          </div>
          <div class="modal-actions">
            <button
              type="button"
              class="btn btn-outline"
              onclick="closeJoinGroupModal()"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">Join Group</button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Use the same pattern as your other pages - fetch data from API
      const url = "http://localhost:3000/groups/api";

      let groups = [];
      let currentUser = null; // We'll get this from your auth system

      // Function to check if current user is a member of a group
      function isUserMember(group) {
        if (!currentUser || !group.members) return false;
        return group.members.some(
          (member) => member.user && member.user._id === currentUser._id
        );
      }

      function renderGroups(groupsToRender) {
        const container = document.getElementById("groupList");

        if (!groupsToRender || groupsToRender.length === 0) {
          container.innerHTML =
            "<p>No groups found. Create your first group!</p>";
          return;
        }

        container.innerHTML = "";

        groupsToRender.forEach((group) => {
          const isMember = isUserMember(group);
          const card = document.createElement("div");
          card.className = "card group-card";
          card.setAttribute("data-name", group.name.toLowerCase());
          card.setAttribute("data-specialization", group.specialization);

          card.innerHTML = `
            <h2>${group.name}</h2>
            <p><strong>Specialization:</strong> ${group.specialization}</p>
            <p><strong>Level:</strong> ${group.level || 1}</p>
            <p><strong>Members:</strong> ${
              group.members ? group.members.length : 0
            }</p>
            <p><strong>Created:</strong> ${new Date(
              group.createdAt
            ).toLocaleDateString()}</p>
            
            <div class="group-actions">
              ${
                isMember
                  ? `<button class="btn btn-success btn-block" onclick="viewGroup('${group._id}')">
                    âœ“ Member - View Group
                  </button>`
                  : `<button class="btn btn-primary btn-block" onclick="joinGroup('${group._id}')">
                    Join Group
                  </button>
                  <button class="btn btn-outline btn-block" onclick="viewGroup('${group._id}')">
                    View Details
                  </button>`
              }
            </div>
            
            ${
              isMember ? '<div class="member-badge">You are a member</div>' : ""
            }
          `;

          container.appendChild(card);
        });
      }

      // Join group function
      async function joinGroup(groupId) {
        console.log("Joining group:", groupId);

        const joinBtn = document.querySelector(
          `[onclick="joinGroup('${groupId}')"]`
        );
        const originalText = joinBtn.textContent;

        try {
          joinBtn.textContent = "Joining...";
          joinBtn.disabled = true;

          const response = await fetch(`/groups/${groupId}/join`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const result = await response.json();

          if (response.ok) {
            showMessage(
              "success",
              result.message || "Successfully joined the group!"
            );

            // Update the UI immediately
            const groupIndex = groups.findIndex((g) => g._id === groupId);
            if (groupIndex !== -1) {
              // Add current user to members list
              if (!groups[groupIndex].members) {
                groups[groupIndex].members = [];
              }
              groups[groupIndex].members.push({
                user: currentUser,
                role: "Member",
              });

              // Re-render the groups
              renderGroups(groups);
            }
          } else {
            showMessage("error", result.error || "Failed to join group");
            joinBtn.textContent = originalText;
            joinBtn.disabled = false;
          }
        } catch (error) {
          console.error("Error joining group:", error);
          showMessage("error", "Error joining group. Please try again.");
          joinBtn.textContent = originalText;
          joinBtn.disabled = false;
        }
      }

      // View group function
      function viewGroup(groupId) {
        console.log("Navigating to group:", groupId);
        window.location.href = "/groups/" + groupId;
      }

      // Join with code function
      async function joinGroupWithCode(groupCode) {
        try {
          // You'll need to implement this endpoint
          const response = await fetch(`/groups/join/${groupCode}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const result = await response.json();

          if (response.ok) {
            showMessage(
              "success",
              result.message || "Successfully joined the group!"
            );
            closeJoinGroupModal();
            loadGroups(); // Reload groups list
          } else {
            showMessage("error", result.error || "Invalid group code");
          }
        } catch (error) {
          console.error("Error joining group with code:", error);
          showMessage("error", "Error joining group. Please try again.");
        }
      }

      function applyFilters() {
        const searchValue = document
          .getElementById("searchInput")
          .value.toLowerCase();
        const filterValue = document.getElementById("filterSelect").value;

        const filtered = groups.filter((group) => {
          const matchesSearch = group.name.toLowerCase().includes(searchValue);
          const matchesFilter =
            filterValue === "all" || group.specialization === filterValue;
          return matchesSearch && matchesFilter;
        });

        renderGroups(filtered);
      }

      // Modal Functions
      function openCreateGroupModal() {
        document.getElementById("createGroupModal").style.display = "block";
        document.getElementById("groupName").focus();
      }

      function closeCreateGroupModal() {
        document.getElementById("createGroupModal").style.display = "none";
        document.getElementById("createGroupForm").reset();
        hideMessages();
      }

      function openJoinGroupModal() {
        document.getElementById("joinGroupModal").style.display = "block";
        document.getElementById("groupCode").focus();
      }

      function closeJoinGroupModal() {
        document.getElementById("joinGroupModal").style.display = "none";
        document.getElementById("joinGroupForm").reset();
        hideMessages();
      }

      function showMessage(type, text) {
        const messageEl = document.getElementById(type + "Message");
        messageEl.textContent = text;
        messageEl.style.display = "block";

        // Auto-hide after 5 seconds
        setTimeout(() => {
          hideMessages();
        }, 5000);
      }

      function hideMessages() {
        document.getElementById("successMessage").style.display = "none";
        document.getElementById("errorMessage").style.display = "none";
      }

      function loadGroups() {
        fetch(url)
          .then((res) => {
            if (!res.ok) {
              throw new Error(`Failed to fetch: ${res.status}`);
            }
            return res.json();
          })
          .then((data) => {
            groups = data;

            // Get current user info (you'll need to set this from your auth system)
            // This is a placeholder - you'll need to get the actual user data
            currentUser = {
              _id: "current-user-id", // You'll need to set this properly
              fullName: "Current User",
            };

            renderGroups(groups);
          })
          .catch((err) => {
            console.error("Error loading groups:", err);
            document.getElementById("groupList").innerHTML =
              "<p>Error loading groups. Please try again.</p>";
          });
      }

      // Handle create group form submission
      document
        .getElementById("createGroupForm")
        .addEventListener("submit", function (e) {
          e.preventDefault();

          const formData = new FormData(this);
          const groupData = {
            name: formData.get("name"),
            specialization: formData.get("specialization"),
          };

          const submitBtn = this.querySelector('button[type="submit"]');
          submitBtn.textContent = "Creating...";
          submitBtn.disabled = true;

          fetch("/groups", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(groupData),
          })
            .then((response) => {
              if (response.ok) {
                showMessage("success", "Group created successfully!");
                closeCreateGroupModal();
                setTimeout(loadGroups, 1000);
              } else {
                return response.json().then((errorData) => {
                  throw new Error(errorData.error || "Failed to create group");
                });
              }
            })
            .catch((error) => {
              console.error("Error creating group:", error);
              showMessage("error", "Error creating group: " + error.message);
            })
            .finally(() => {
              submitBtn.textContent = "Create Group";
              submitBtn.disabled = false;
            });
        });

      // Handle join group form submission
      document
        .getElementById("joinGroupForm")
        .addEventListener("submit", function (e) {
          e.preventDefault();
          const formData = new FormData(this);
          const groupCode = formData.get("code").toUpperCase().trim();

          if (groupCode.length !== 8) {
            showMessage("error", "Group code must be 8 characters long");
            return;
          }

          joinGroupWithCode(groupCode);
        });

      // Close modals when clicking outside
      window.addEventListener("click", function (event) {
        const createModal = document.getElementById("createGroupModal");
        const joinModal = document.getElementById("joinGroupModal");

        if (event.target === createModal) {
          closeCreateGroupModal();
        }
        if (event.target === joinModal) {
          closeJoinGroupModal();
        }
      });

      // Load groups when page loads
      document.addEventListener("DOMContentLoaded", function () {
        loadGroups();

        // Add event listeners for real-time filtering
        document
          .getElementById("searchInput")
          .addEventListener("input", applyFilters);
        document
          .getElementById("filterSelect")
          .addEventListener("change", applyFilters);
      });
    </script>
  </body>
</html>
