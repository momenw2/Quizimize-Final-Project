<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Groups</title>
    <link rel="stylesheet" href="/groupStyle.css" />
  </head>
  <body>
    <!-- Add hidden element with user data -->
    <div id="currentUserData" style="display: none">
      <%- JSON.stringify(user) %>
    </div>

    <div class="container">
      <div class="header">Groups</div>

      <!-- Success/Error Messages -->
      <div id="successMessage" class="success-message"></div>
      <div id="errorMessage" class="error-message"></div>

      <!-- Search & Filter -->
      <div class="controls">
        <input
          type="text"
          id="searchInput"
          placeholder="Search groups..."
          style="flex: 1"
        />
        <select id="filterSelect">
          <option value="all">All</option>
          <option value="JavaScript">JavaScript</option>
          <option value="React">React</option>
          <option value="SQL">SQL</option>
          <option value="Python">Python</option>
        </select>
        <button class="btn btn-primary" onclick="applyFilters()">Search</button>
      </div>

      <!-- Group Actions -->
      <div class="controls">
        <button class="btn btn-primary" onclick="openCreateGroupModal()">
          Create Group
        </button>
        <button class="btn btn-outline" onclick="openJoinGroupModal()">
          Join Group with Code
        </button>
      </div>

      <!-- User's Joined Groups -->
      <div class="controls">
        <h3>My Groups</h3>
      </div>
      <div class="group-grid" id="userGroupsList">
        <div class="loading">Loading your groups...</div>
      </div>

      <!-- All Groups -->
      <div class="controls">
        <h3>All Groups</h3>
      </div>
      <div class="group-grid" id="allGroupsList">
        <div class="loading">Loading groups...</div>
      </div>
    </div>

    <!-- Create Group Modal -->
    <div id="createGroupModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Create New Group</h3>
          <span class="close" onclick="closeCreateGroupModal()">&times;</span>
        </div>
        <form id="createGroupForm">
          <div class="form-group">
            <label for="groupName">Group Name:</label>
            <input
              type="text"
              id="groupName"
              name="name"
              required
              placeholder="Enter group name"
            />
          </div>
          <div class="form-group">
            <label for="groupSpecialization">Specialization:</label>
            <select id="groupSpecialization" name="specialization" required>
              <option value="">Select specialization</option>
              <option value="JavaScript">JavaScript</option>
              <option value="React">React</option>
              <option value="SQL">SQL</option>
              <option value="Python">Python</option>
              <option value="Node.js">Node.js</option>
              <option value="HTML/CSS">HTML/CSS</option>
              <option value="MongoDB">MongoDB</option>
              <option value="Express.js">Express.js</option>
            </select>
          </div>
          <div class="modal-actions">
            <button
              type="button"
              class="btn btn-outline"
              onclick="closeCreateGroupModal()"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">Create Group</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Join Group Modal -->
    <div id="joinGroupModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Join Group with Code</h3>
          <span class="close" onclick="closeJoinGroupModal()">&times;</span>
        </div>
        <form id="joinGroupForm">
          <div class="form-group">
            <label for="groupCode">Group Code:</label>
            <input
              type="text"
              id="groupCode"
              name="code"
              required
              placeholder="Enter group code"
              maxlength="8"
              style="text-transform: uppercase"
            />
            <small
              >Enter the 8-character group code provided by the group
              admin</small
            >
          </div>
          <div class="modal-actions">
            <button
              type="button"
              class="btn btn-outline"
              onclick="closeJoinGroupModal()"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">Join Group</button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Use the same pattern as your other pages - fetch data from API
      const url = "http://localhost:3000/groups/api";
      let groups = [];
      let currentUser = null;

      // Initialize current user from the hidden element
      function initializeCurrentUser() {
        try {
          const userElement = document.getElementById("currentUserData");
          if (userElement && userElement.textContent) {
            currentUser = JSON.parse(userElement.textContent);
            console.log("Current user initialized:", currentUser);
          } else {
            console.error("Could not find user data element");
            currentUser = { _id: null, fullName: "Guest" };
          }
        } catch (error) {
          console.error("Error parsing user data:", error);
          currentUser = { _id: null, fullName: "Guest" };
        }
      }

      // Enhanced function to check if current user is a member of a group
      function isUserMember(group) {
        if (!currentUser || !currentUser._id) {
          console.log("No current user or user ID");
          return false;
        }

        if (!group.members || !Array.isArray(group.members)) {
          console.log("Group has no members array:", group.name);
          return false;
        }

        const isMember = group.members.some((member) => {
          // Handle both populated user object and user ID string
          const memberUserId = member.user?._id || member.user;
          return (
            memberUserId &&
            memberUserId.toString() === currentUser._id.toString()
          );
        });

        console.log(
          `User ${currentUser._id} is member of ${group.name}:`,
          isMember
        );
        return isMember;
      }

      // Helper function to get user's role in a group
      function getUserRole(group) {
        if (!currentUser || !group.members) return "Non-member";

        const member = group.members.find((member) => {
          const memberUserId = member.user?._id || member.user;
          return (
            memberUserId &&
            memberUserId.toString() === currentUser._id.toString()
          );
        });

        return member ? member.role : "Non-member";
      }

      // Function to separate user's groups from all groups
      function separateUserGroups(allGroups) {
        const userGroups = [];
        const otherGroups = [];

        console.log("Separating groups for user:", currentUser._id);

        allGroups.forEach((group, index) => {
          console.log(`Group ${index + 1}: ${group.name}`);
          console.log("Group members:", group.members);

          const isMember = isUserMember(group);
          console.log(`Is member: ${isMember}`);

          if (isMember) {
            userGroups.push(group);
          } else {
            otherGroups.push(group);
          }
        });

        console.log("User groups count:", userGroups.length);
        console.log("Other groups count:", otherGroups.length);

        return { userGroups, otherGroups };
      }

      // Function to render user's groups
      function renderUserGroups(userGroups) {
        const container = document.getElementById("userGroupsList");

        if (!userGroups || userGroups.length === 0) {
          container.innerHTML =
            "<p>You haven't joined any groups yet. Join a group to get started!</p>";
          return;
        }

        container.innerHTML = "";
        userGroups.forEach((group) => {
          const card = document.createElement("div");
          card.className = "card group-card";
          card.setAttribute("data-name", group.name.toLowerCase());
          card.setAttribute("data-specialization", group.specialization);
          card.innerHTML = `
                    <h2>${group.name}</h2>
                    <p><strong>Specialization:</strong> ${
                      group.specialization
                    }</p>
                    <p><strong>Level:</strong> ${group.level || 1}</p>
                    <p><strong>Members:</strong> ${
                      group.members ? group.members.length : 0
                    }</p>
                    <p><strong>Your Role:</strong> ${getUserRole(group)}</p>
                    <p><strong>Created:</strong> ${new Date(
                      group.createdAt
                    ).toLocaleDateString()}</p>
                    <div class="group-actions">
                        <button class="btn btn-success btn-block" onclick="viewGroup('${
                          group._id
                        }')">
                            âœ“ Member - View Group
                        </button>
                        <button class="btn btn-outline btn-block" onclick="viewGroup('${
                          group._id
                        }')">
                            View Details
                        </button>
                    </div>
                    <div class="member-badge">You are a member</div>
                `;
          container.appendChild(card);
        });
      }

      // Function to render all other groups (that user hasn't joined)
      function renderOtherGroups(otherGroups) {
        const container = document.getElementById("allGroupsList");

        if (!otherGroups || otherGroups.length === 0) {
          container.innerHTML =
            "<p>No other groups available. Create your first group!</p>";
          return;
        }

        container.innerHTML = "";
        otherGroups.forEach((group) => {
          const card = document.createElement("div");
          card.className = "card group-card";
          card.setAttribute("data-name", group.name.toLowerCase());
          card.setAttribute("data-specialization", group.specialization);
          card.innerHTML = `
                    <h2>${group.name}</h2>
                    <p><strong>Specialization:</strong> ${
                      group.specialization
                    }</p>
                    <p><strong>Level:</strong> ${group.level || 1}</p>
                    <p><strong>Members:</strong> ${
                      group.members ? group.members.length : 0
                    }</p>
                    <p><strong>Created:</strong> ${new Date(
                      group.createdAt
                    ).toLocaleDateString()}</p>
                    <div class="group-actions">
                        <button class="btn btn-primary btn-block" onclick="joinGroup('${
                          group._id
                        }')">
                            Join Group
                        </button>
                        <button class="btn btn-outline btn-block" onclick="viewGroup('${
                          group._id
                        }')">
                            View Details
                        </button>
                    </div>
                `;
          container.appendChild(card);
        });
      }

      // Join group function
      async function joinGroup(groupId) {
        console.log("Joining group:", groupId);
        const joinBtn = document.querySelector(
          `[onclick="joinGroup('${groupId}')"]`
        );
        const originalText = joinBtn.textContent;

        try {
          joinBtn.textContent = "Joining...";
          joinBtn.disabled = true;

          const response = await fetch(`/groups/${groupId}/join`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const result = await response.json();

          if (response.ok) {
            showMessage(
              "success",
              result.message || "Successfully joined the group!"
            );

            // Reload groups to update both sections
            setTimeout(loadGroups, 500);
          } else {
            showMessage("error", result.error || "Failed to join group");
            joinBtn.textContent = originalText;
            joinBtn.disabled = false;
          }
        } catch (error) {
          console.error("Error joining group:", error);
          showMessage("error", "Error joining group. Please try again.");
          joinBtn.textContent = originalText;
          joinBtn.disabled = false;
        }
      }

      // View group function
      function viewGroup(groupId) {
        console.log("Navigating to group:", groupId);
        window.location.href = "/groups/" + groupId;
      }

      // Join with code function
      async function joinGroupWithCode(groupCode) {
        try {
          const response = await fetch(`/groups/join/${groupCode}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const result = await response.json();

          if (response.ok) {
            showMessage(
              "success",
              result.message || "Successfully joined the group!"
            );
            closeJoinGroupModal();
            loadGroups(); // Reload groups list
          } else {
            showMessage("error", result.error || "Invalid group code");
          }
        } catch (error) {
          console.error("Error joining group with code:", error);
          showMessage("error", "Error joining group. Please try again.");
        }
      }

      function applyFilters() {
        const searchValue = document
          .getElementById("searchInput")
          .value.toLowerCase();
        const filterValue = document.getElementById("filterSelect").value;

        // Filter both user groups and other groups
        const filteredUserGroups = groups.filter((group) => {
          const matchesSearch = group.name.toLowerCase().includes(searchValue);
          const matchesFilter =
            filterValue === "all" || group.specialization === filterValue;
          const isMember = isUserMember(group);
          return matchesSearch && matchesFilter && isMember;
        });

        const filteredOtherGroups = groups.filter((group) => {
          const matchesSearch = group.name.toLowerCase().includes(searchValue);
          const matchesFilter =
            filterValue === "all" || group.specialization === filterValue;
          const isMember = isUserMember(group);
          return matchesSearch && matchesFilter && !isMember;
        });

        renderUserGroups(filteredUserGroups);
        renderOtherGroups(filteredOtherGroups);
      }

      // Modal Functions
      function openCreateGroupModal() {
        document.getElementById("createGroupModal").style.display = "block";
        document.getElementById("groupName").focus();
      }

      function closeCreateGroupModal() {
        document.getElementById("createGroupModal").style.display = "none";
        document.getElementById("createGroupForm").reset();
        hideMessages();
      }

      function openJoinGroupModal() {
        document.getElementById("joinGroupModal").style.display = "block";
        document.getElementById("groupCode").focus();
      }

      function closeJoinGroupModal() {
        document.getElementById("joinGroupModal").style.display = "none";
        document.getElementById("joinGroupForm").reset();
        hideMessages();
      }

      function showMessage(type, text) {
        const messageEl = document.getElementById(type + "Message");
        messageEl.textContent = text;
        messageEl.style.display = "block";
        // Auto-hide after 5 seconds
        setTimeout(() => {
          hideMessages();
        }, 5000);
      }

      function hideMessages() {
        document.getElementById("successMessage").style.display = "none";
        document.getElementById("errorMessage").style.display = "none";
      }

      function loadGroups() {
        // Make sure we have the current user
        if (!currentUser || !currentUser._id) {
          console.log("Waiting for user data...");
          setTimeout(loadGroups, 100);
          return;
        }

        fetch(url)
          .then((res) => {
            if (!res.ok) {
              throw new Error(`Failed to fetch: ${res.status}`);
            }
            return res.json();
          })
          .then((data) => {
            groups = data;
            console.log("All groups loaded:", groups);
            console.log("Current user ID:", currentUser._id);

            // Separate groups into user's groups and other groups
            const { userGroups, otherGroups } = separateUserGroups(groups);

            console.log("User groups found:", userGroups.length);
            console.log("Other groups:", otherGroups.length);

            // Render both sections
            renderUserGroups(userGroups);
            renderOtherGroups(otherGroups);
          })
          .catch((err) => {
            console.error("Error loading groups:", err);
            document.getElementById("userGroupsList").innerHTML =
              "<p>Error loading your groups. Please try again.</p>";
            document.getElementById("allGroupsList").innerHTML =
              "<p>Error loading groups. Please try again.</p>";
          });
      }

      // Handle create group form submission
      document
        .getElementById("createGroupForm")
        .addEventListener("submit", function (e) {
          e.preventDefault();
          const formData = new FormData(this);
          const groupData = {
            name: formData.get("name"),
            specialization: formData.get("specialization"),
          };

          const submitBtn = this.querySelector('button[type="submit"]');
          submitBtn.textContent = "Creating...";
          submitBtn.disabled = true;

          fetch("/groups", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(groupData),
          })
            .then((response) => {
              if (response.ok) {
                showMessage("success", "Group created successfully!");
                closeCreateGroupModal();
                setTimeout(loadGroups, 1000);
              } else {
                return response.json().then((errorData) => {
                  throw new Error(errorData.error || "Failed to create group");
                });
              }
            })
            .catch((error) => {
              console.error("Error creating group:", error);
              showMessage("error", "Error creating group: " + error.message);
            })
            .finally(() => {
              submitBtn.textContent = "Create Group";
              submitBtn.disabled = false;
            });
        });

      // Handle join group form submission
      document
        .getElementById("joinGroupForm")
        .addEventListener("submit", function (e) {
          e.preventDefault();
          const formData = new FormData(this);
          const groupCode = formData.get("code").toUpperCase().trim();

          if (groupCode.length !== 8) {
            showMessage("error", "Group code must be 8 characters long");
            return;
          }

          joinGroupWithCode(groupCode);
        });

      // Close modals when clicking outside
      window.addEventListener("click", function (event) {
        const createModal = document.getElementById("createGroupModal");
        const joinModal = document.getElementById("joinGroupModal");

        if (event.target === createModal) {
          closeCreateGroupModal();
        }
        if (event.target === joinModal) {
          closeJoinGroupModal();
        }
      });

      // Load groups when page loads
      document.addEventListener("DOMContentLoaded", function () {
        initializeCurrentUser();
        loadGroups();

        // Add event listeners for real-time filtering
        document
          .getElementById("searchInput")
          .addEventListener("input", applyFilters);
        document
          .getElementById("filterSelect")
          .addEventListener("change", applyFilters);
      });
    </script>
  </body>
</html>
