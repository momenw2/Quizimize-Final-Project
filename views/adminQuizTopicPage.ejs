<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/adminQuizTopicStyle.css" />
    <title>Quizimize - Admin Quiz Topic</title>
  </head>
  <body>
    <%- include('partials/header.ejs') -%>

    <div class="mainContainer">
      <div class="topicHeader"></div>

      <div class="topicsContainer"></div>

      <div class="container">
        <div class="addSubjectContainer">
          <h2>Add Subject</h2>
          <input type="text" id="subjectNameInput" placeholder="Subject Name" />
          <button id="addSubjectBtn">Add</button>
        </div>

        <!-- Form for editing or adding subjects -->
        <!-- <h2>Edit Subject</h2>
        <select id="subjectSelect">
          <option value="" disabled selected>Select a subject to edit</option>
        </select>
        <input
          type="text"
          id="newSubjectNameInput"
          placeholder="New Subject Name"
        />
        <button id="editSubjectBtn">Edit</button> -->

        <!-- Form for deleting a quizTopic -->
        <h2>Delete Quiz Topic</h2>
        <select id="deleteTopicSelect">
          <option value="" disabled selected>Select a topic to delete</option>
        </select>
        <button id="deleteTopicBtn">Delete</button>
      </div>
    </div>

    <script type="module">
      const topicsContainer = document.querySelector(".topicsContainer");
      const topicHeader = document.querySelector(".topicHeader");
      const url = "http://localhost:3000/quizTopic";
      const selectedSubjectName = localStorage.getItem("selectedSubjectName");
      const clickedCardName = localStorage.getItem("clickedCardName");

      // Function to handle when a topic box is clicked
      function handleTopicBoxClick(topicName) {
        // Save the clicked topic name in local storage
        localStorage.setItem("selectedTopicName", topicName);
      }

      fetch(url)
        .then((res) => {
          if (!res.ok) {
            throw new Error(`Failed to fetch: ${res.status}`);
          }
          return res.json();
        })
        .then((data) => {
          if (!data || !Array.isArray(data)) {
            throw new Error("Invalid data format");
          }
          data.forEach((data) => {
            if (selectedSubjectName === data.name) {
              topicHeader.innerHTML = `<p>${data.subject} - ${data.name}</p>`;
              data.quizTopics.forEach((topic) => {
                const topicBox = document.createElement("div");
                topicBox.classList.add("topicBox");
                // Store the topic name in a variable
                const topicName = topic.name;
                // Create the inner HTML content for the topic box
                topicBox.innerHTML = `
            <div class="boxContent">
              <div class="quizname">
                <a href="/adminQuizList" class="topicLink">${topicName}</a>
              </div>
            </div>
          `;
                // Append the topic box to the topics container
                topicsContainer.appendChild(topicBox);

                // Add click event listener to the topic link inside the topic box
                const topicLink = topicBox.querySelector(".topicLink");
                topicLink.addEventListener("click", () => {
                  handleTopicBoxClick(topicName); // Call function to handle click
                });
              });
            }
          });
        })
        .catch((err) => {
          console.log(err.message);
        });

      // Function to add a new subject
      async function addSubject() {
        const subjectNameInput = document.getElementById("subjectNameInput");
        const quizTopicName = subjectNameInput.value.trim();
        const clickedCardName = localStorage.getItem("clickedCardName");
        const selectedSubjectName = localStorage.getItem("selectedSubjectName");

        if (quizTopicName === "") {
          alert("Please enter a subject name.");
          return;
        }

        const url = `http://localhost:3000/quizTopic/${selectedSubjectName}/${clickedCardName}`;

        try {
          const response = await fetch(url, {
            method: "PATCH", // Use PATCH method to update the existing group or create new if not exists
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name: quizTopicName,
              URL: "../QuizTopic/quizTopic.html",
              total: 0,
              done: 0,
            }),
          });

          const responseData = await response.json();

          if (response.ok) {
            // Check if the group was not found (404 status)
            if (responseData.message === "Group not found") {
              // If the group was not found, it means it needs to be created
              const createGroupResponse = await fetch(
                "http://localhost:3000/quizTopic",
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    subject: clickedCardName,
                    name: selectedSubjectName,
                    quizTopics: [
                      {
                        name: quizTopicName,
                        URL: "../QuizTopic/quizTopic.html",
                        total: 0,
                        done: 0,
                      },
                    ],
                  }),
                }
              );

              if (!createGroupResponse.ok) {
                console.error(
                  "Failed to create new group:",
                  createGroupResponse.statusText
                );
                return;
              }
            }

            // Clear input field
            subjectNameInput.value = "";
            // Reload the page after successfully adding the subject
            window.location.reload();
          } else {
            console.error("Failed to add new subject:", response.statusText);
          }
        } catch (error) {
          console.error("Error adding new subject:", error);
        }
      }

      //#################
      // Function to populate the select element with available subjects
      function populateSubjectSelect(quizTopics) {
        // const subjectSelect = document.getElementById("subjectSelect");
        const deleteTopicSelect = document.getElementById("deleteTopicSelect");
        // subjectSelect.innerHTML =
        //   '<option value="" disabled selected>Select a subject to edit</option>';
        deleteTopicSelect.innerHTML =
          '<option value="" disabled selected>Select a topic to delete</option>';

        quizTopics.forEach((quizTopic) => {
          if (quizTopic.name === selectedSubjectName) {
            quizTopic.quizTopics.forEach((qt) => {
              const option = document.createElement("option");
              option.value = qt.name;
              option.textContent = qt.name;
              // subjectSelect.appendChild(option);
              // Populate delete topic select
              const deleteOption = document.createElement("option");
              deleteOption.value = qt.name;
              deleteOption.textContent = qt.name;
              deleteTopicSelect.appendChild(deleteOption);
            });
          }
        });
      }

      // Function to handle editing an existing subject
      // async function editSubject() {
      //   const newSubjectNameInput = document.getElementById(
      //     "newSubjectNameInput"
      //   );
      //   const newSubjectName = newSubjectNameInput.value.trim();
      //   const selectedSubjectName =
      //     document.getElementById("subjectSelect").value;

      //   if (!selectedSubjectName) {
      //     alert("Please select a subject to edit.");
      //     return;
      //   }

      //   const subjectData = {
      //     newName: newSubjectName,
      //   };

      //   try {
      //     const response = await fetch(
      //       `http://localhost:3000/quizTopic/${selectedSubjectName}`,
      //       {
      //         method: "PUT",
      //         headers: {
      //           "Content-Type": "application/json",
      //         },
      //         body: JSON.stringify(subjectData),
      //       }
      //     );

      //     if (response.ok) {
      //       newSubjectNameInput.value = ""; // Clear input field
      //       // Reload the page after successfully editing the subject
      //       window.location.reload();
      //     } else {
      //       console.error("Failed to edit subject:", response.statusText);
      //     }
      //   } catch (error) {
      //     console.error("Error editing subject:", error);
      //   }
      // }

      // Function to delete a quizTopic
      async function deleteTopic() {
        const selectedTopicName =
          document.getElementById("deleteTopicSelect").value;

        if (!selectedTopicName) {
          alert("Please select a topic to delete.");
          return;
        }

        try {
          const selectedSubjectName = localStorage.getItem(
            "selectedSubjectName"
          );
          const response = await fetch(
            `http://localhost:3000/quizTopic/${selectedSubjectName}/${selectedTopicName}`,
            {
              method: "DELETE",
            }
          );

          if (response.ok) {
            // Reload the page after successfully deleting the topic
            window.location.reload();
          } else {
            console.error("Failed to delete topic:", response.statusText);
          }
        } catch (error) {
          console.error("Error deleting topic:", error);
        }
      }

      // Fetch subjects and populate the select element when the page loads
      window.addEventListener("load", async () => {
        try {
          const response = await fetch("http://localhost:3000/quizTopic");
          if (!response.ok) {
            throw new Error(`Failed to fetch subjects: ${response.status}`);
          }
          const data = await response.json();
          populateSubjectSelect(data);
        } catch (error) {
          console.error("Error fetching subjects:", error.message);
        }
      });
      //###############

      // Attach editSubject function to button click event
      // document
      //   .getElementById("editSubjectBtn")
      //   .addEventListener("click", editSubject);

      // Attach addSubject function to button click event
      document
        .getElementById("addSubjectBtn")
        .addEventListener("click", addSubject);

      // Attach deleteTopic function to button click event
      document
        .getElementById("deleteTopicBtn")
        .addEventListener("click", deleteTopic);
    </script>
  </body>
</html>
