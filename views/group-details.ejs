<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title><%= group.name %> - Group Details</title>
    <link rel="stylesheet" href="/groupDetailsStyle.css" />
    <script src="/socket.io/socket.io.js"></script>
    <style>
      .xp-section {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      }

      .xp-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
      }

      .xp-level {
        font-size: 2.5em;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
      }

      .xp-progress-container {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 15px;
        backdrop-filter: blur(10px);
      }

      .xp-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 0.9em;
      }

      .xp-progress-bar {
        width: 100%;
        height: 20px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 10px;
        overflow: hidden;
      }

      .xp-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);
        border-radius: 10px;
        transition: width 0.5s ease-in-out;
        position: relative;
      }

      .xp-progress-fill::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
          90deg,
          transparent 0%,
          rgba(255, 255, 255, 0.4) 50%,
          transparent 100%
        );
        animation: shimmer 2s infinite;
      }

      @keyframes shimmer {
        0% {
          transform: translateX(-100%);
        }
        100% {
          transform: translateX(100%);
        }
      }

      .xp-stats {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-top: 15px;
      }

      .xp-stat-card {
        background: rgba(255, 255, 255, 0.1);
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        backdrop-filter: blur(5px);
      }

      .xp-stat-value {
        font-size: 1.5em;
        font-weight: bold;
        margin-bottom: 5px;
      }

      .xp-stat-label {
        font-size: 0.8em;
        opacity: 0.9;
      }

      .level-up-animation {
        animation: levelUp 1s ease-out;
      }

      @keyframes levelUp {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }

      .xp-sources {
        margin-top: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #667eea;
      }

      .xp-sources h4 {
        margin-bottom: 10px;
        color: #333;
      }

      .xp-sources-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 10px;
        font-size: 0.9em;
      }

      .xp-source-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid #e9ecef;
      }

      .xp-source-item:last-child {
        border-bottom: none;
      }

      .xp-amount {
        font-weight: bold;
        color: #4facfe;
      }

      /* XP Notification Styles */
      .xp-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        animation: slideInRight 0.5s ease-out;
        max-width: 300px;
      }

      .xp-notification.fade-out {
        animation: slideOutRight 0.5s ease-in forwards;
      }

      .xp-notification-header {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 5px;
      }

      .xp-notification-amount {
        font-size: 1.2em;
        font-weight: bold;
      }

      .xp-notification-source {
        font-size: 0.9em;
        opacity: 0.9;
      }

      .xp-notification-user {
        font-size: 0.8em;
        opacity: 0.8;
        margin-top: 5px;
      }

      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    </style>
  </head>
  <body class="<%= isAdmin ? 'is-admin' : '' %>">
    <div class="container">
      <div class="header-section">
        <div class="group-summary">
          <h1 class="group-title"><%= group.name %></h1>

          <!-- XP and Level Section -->
          <div class="xp-section">
            <div class="xp-header">
              <div>
                <h2 style="margin: 0; font-size: 1.2em">Group Progress</h2>
                <p style="margin: 5px 0 0 0; opacity: 0.9; font-size: 0.9em">
                  Keep contributing to level up!
                </p>
              </div>
              <div class="xp-level" id="levelDisplay">
                Level <%= group.level || 1 %>
              </div>
            </div>

            <div class="xp-progress-container">
              <div class="xp-info">
                <span id="currentXp"><%= group.xp || 0 %></span>
                <span id="requiredXp"
                  ><%= group.requiredXp || 2000 %> XP to Level <%= (group.level
                  || 1) + 1 %></span
                >
              </div>
              <div class="xp-progress-bar">
                <div class="xp-progress-fill" id="xpProgressBar"></div>
              </div>
            </div>
          </div>
          <p class="group-meta">Specialization: <%= group.specialization %></p>

          <!-- Description Display -->
          <div class="group-description">
            <% if (group.description) { %>
            <p class="description-text" id="currentDescription">
              <%= group.description %>
            </p>
            <% } else { %>
            <p class="description-text no-description" id="currentDescription">
              No description yet. <% if (isAdmin) { %>
              <a href="javascript:void(0)" onclick="showEditDescription()"
                >Add a description</a
              >
              <% } %>
            </p>
            <% } %>
          </div>

          <p class="group-meta">
            Created: <%= new Date(group.createdAt).toLocaleDateString() %>
          </p>
        </div>
        <a href="/groups" class="back-btn">‚Üê Back to Groups</a>
      </div>

      <div class="main-grid">
        <div class="content-area">
          <div class="tabs">
            <button
              class="tab-btn active"
              data-tab="timeline"
              onclick="showTab('timeline')"
            >
              Timeline
            </button>
            <button
              class="tab-btn"
              data-tab="missions"
              onclick="showTab('missions')"
            >
              Missions
            </button>
            <button class="tab-btn" data-tab="chat" onclick="showTab('chat')">
              Chat
            </button>
            <button class="tab-btn" data-tab="stats" onclick="showTab('stats')">
              Stats
            </button>
            <!-- Dashboard Tab - Only visible to admin -->
            <% if (isAdmin) { %>
            <button
              class="tab-btn admin-only"
              data-tab="dashboard"
              onclick="showTab('dashboard')"
              id="dashboardTab"
            >
              Dashboard
            </button>
            <% } %>
          </div>

          <!-- Include Tab Contents -->
          <%- include('partials/timeline') %> <%- include('partials/missions')
          %> <%- include('partials/chat') %> <%- include('partials/stats') %> <%
          if (isAdmin) { %> <%- include('partials/dashboard') %> <% } %>
        </div>

        <div class="side-panel">
          <div class="members-section">
            <h3>Members (<%= group.members.length %>)</h3>
            <% if (group.members && group.members.length > 0) { %>
            <div class="members-list">
              <% group.members.forEach(function(member, index) { %>
              <div class="member-card">
                <div class="member-info">
                  <h4>
                    <% if (member.user && member.user.fullName) { %> <%=
                    member.user.fullName %> <% } else { %> User <%= index + 1 %>
                    <% } %>
                  </h4>
                  <p>Level: <%= member.user ? member.user.level : "N/A" %></p>
                </div>
                <span class="member-role"><%= member.role %></span>
              </div>
              <% }); %>
            </div>
            <% } else { %>
            <p style="text-align: center; color: #666; font-style: italic">
              No members yet.
            </p>
            <% } %>
            <div class="action-buttons" style="margin-top: 20px">
              <button class="btn btn-primary" onclick="inviteMember()">
                Invite Member
              </button>
              <!-- Test XP Button (Admin Only) -->
              <% if (isAdmin) { %>
              <button
                class="btn btn-secondary"
                onclick="testAddXp()"
                style="margin-top: 10px"
              >
                Test +500 XP
              </button>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Description Edit Modal -->
    <div id="descriptionModal" class="modal" style="display: none">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Edit Group Description</h3>
          <span class="close" onclick="hideEditDescription()">&times;</span>
        </div>
        <div class="modal-body">
          <textarea
            id="descriptionInput"
            placeholder="Describe your group's purpose, goals, or any important information..."
            rows="5"
            maxlength="500"
          >
<%= group.description || '' %></textarea
          >
          <div class="char-count">
            <span id="charCount"
              ><%= group.description ? group.description.length : 0 %></span
            >/500 characters
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" onclick="hideEditDescription()">
            Cancel
          </button>
          <button class="btn btn-primary" onclick="saveDescription()">
            Save Description
          </button>
        </div>
      </div>
    </div>

    <script>
      // Common variables and functions used across all tabs
      let socket;
      const groupId = "<%= group._id %>";
      let isAdmin = "<%= isAdmin %>";
      let currentGroupData = {
        level: "<%= group.level || 1 %>",
        xp: "<%= group.xp || 0 %>",
        totalXp: "<%= group.totalXp || 0 %>",
        requiredXp: "<%= group.requiredXp || 2000 %>",
      };

      // Safe DOM element getter with null checking
      function getElement(id) {
        const element = document.getElementById(id);
        if (!element) {
          console.warn(`Element with id '${id}' not found`);
        }
        return element;
      }

      // XP Notification System
      function showXpNotification(data) {
        const notification = document.createElement("div");
        notification.className = "xp-notification";

        notification.innerHTML = `
          <div class="xp-notification-header">
            <span class="xp-notification-amount">+${data.amount} XP</span>
          </div>
          <div class="xp-notification-source">${data.source}</div>
          ${
            data.user
              ? `<div class="xp-notification-user">by ${data.user}</div>`
              : ""
          }
        `;

        document.body.appendChild(notification);

        // Auto remove after 5 seconds
        setTimeout(() => {
          notification.classList.add("fade-out");
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 500);
        }, 5000);
      }

      // XP System Functions
      function updateXpDisplay(groupData) {
        const levelDisplay = getElement("levelDisplay");
        const currentXp = getElement("currentXp");
        const requiredXp = getElement("requiredXp");
        const xpProgressBar = getElement("xpProgressBar");
        const totalXp = getElement("totalXp");
        const nextLevelXp = getElement("nextLevelXp");

        if (levelDisplay) levelDisplay.textContent = `Level ${groupData.level}`;
        if (currentXp) currentXp.textContent = groupData.xp;
        if (requiredXp)
          requiredXp.textContent = `${groupData.requiredXp} XP to Level ${
            groupData.level + 1
          }`;
        if (xpProgressBar)
          xpProgressBar.style.width = `${
            (groupData.xp / groupData.requiredXp) * 100
          }%`;
        if (totalXp) totalXp.textContent = groupData.totalXp;
        if (nextLevelXp) nextLevelXp.textContent = groupData.requiredXp;

        // Add animation if level changed
        if (groupData.level > currentGroupData.level) {
          if (levelDisplay) levelDisplay.classList.add("level-up-animation");
          setTimeout(() => {
            if (levelDisplay)
              levelDisplay.classList.remove("level-up-animation");
          }, 1000);
        }

        currentGroupData = groupData;
      }

      async function addGroupXp(amount) {
        try {
          const response = await fetch(`/groups/${groupId}/add-xp`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ amount }),
          });

          if (response.ok) {
            const result = await response.json();
            updateXpDisplay(result);
            return result;
          } else {
            const error = await response.json();
            console.error("Error adding XP:", error);
            return null;
          }
        } catch (error) {
          console.error("Error adding XP:", error);
          return null;
        }
      }

      // Mission completion with XP reward
      async function completeMission(missionId, score, totalPoints) {
        try {
          const response = await fetch(
            `/groups/${groupId}/missions/${missionId}/complete`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                score: score,
                totalPoints: totalPoints,
              }),
            }
          );

          if (response.ok) {
            const result = await response.json();
            console.log("Mission completed with XP reward:", result);
            return result;
          } else {
            const error = await response.json();
            console.error("Error completing mission:", error);
            return null;
          }
        } catch (error) {
          console.error("Error completing mission:", error);
          return null;
        }
      }

      // Test function for admins
      async function testAddXp() {
        const result = await addGroupXp(500);
        if (result) {
          console.log("XP added successfully:", result);
          showXpNotification({
            amount: 500,
            source: "Test XP",
            user: "Admin",
          });
        } else {
          alert("Error adding XP");
        }
      }

      // Tab management
      function showTab(tabId) {
        console.log("Showing tab:", tabId);

        // Hide all tab contents
        const tabs = document.querySelectorAll(".tab-content");
        tabs.forEach((tab) => {
          tab.style.display = "none";
        });

        // Remove active class from all tab buttons
        const buttons = document.querySelectorAll(".tab-btn");
        buttons.forEach((btn) => {
          btn.classList.remove("active");
        });

        // Show selected tab and activate button
        const selectedTab = getElement(tabId);
        if (selectedTab) {
          selectedTab.style.display = "block";
        }

        // Activate the clicked button
        const clickedButton =
          event?.currentTarget ||
          document.querySelector(`[data-tab="${tabId}"]`);
        if (clickedButton) {
          clickedButton.classList.add("active");
        }

        // Load tab-specific content
        switch (tabId) {
          case "timeline":
            if (typeof loadPosts === "function") {
              loadPosts();
            } else {
              console.warn("loadPosts function not found");
            }
            break;
          case "chat":
            if (typeof loadChatHistory === "function") loadChatHistory();
            setTimeout(() => {
              const chatInput = getElement("chatMessageInput");
              if (chatInput) chatInput.focus();
            }, 100);
            break;
          case "dashboard":
            if (isAdmin && typeof loadDashboardData === "function") {
              loadDashboardData();
            }
            break;
          case "missions":
            if (typeof loadMissions === "function") loadMissions();
            break;
          case "stats":
            if (typeof loadStats === "function") loadStats();
            break;
        }
      }

      // Function to show timeline by default
      function showDefaultTab() {
        console.log("Showing default timeline tab...");

        // Hide all tab contents first
        const tabs = document.querySelectorAll(".tab-content");
        tabs.forEach((tab) => {
          tab.style.display = "none";
        });

        // Remove active class from all buttons
        const buttons = document.querySelectorAll(".tab-btn");
        buttons.forEach((btn) => {
          btn.classList.remove("active");
        });

        // Show timeline tab and activate its button
        const timelineTab = getElement("timeline");
        const timelineButton = document.querySelector('[data-tab="timeline"]');

        if (timelineTab) {
          timelineTab.style.display = "block";
          console.log("Timeline tab displayed");
        }

        if (timelineButton) {
          timelineButton.classList.add("active");
          console.log("Timeline button activated");
        }

        // Load timeline posts
        if (typeof loadPosts === "function") {
          console.log("Loading posts...");
          loadPosts();
        } else {
          console.warn("loadPosts function not available yet");
        }
      }

      function inviteMember() {
        const groupCode = "<%= group._id.toString().slice(-8).toUpperCase() %>";
        const inviteLink =
          window.location.origin + "/groups/join?code=" + groupCode;

        if (navigator.clipboard) {
          navigator.clipboard
            .writeText(inviteLink)
            .then(() => {
              alert(
                "Invite link copied to clipboard!\n\nGroup Code: " + groupCode
              );
            })
            .catch(() => {
              alert(
                "Group Code: " + groupCode + "\nInvite Link: " + inviteLink
              );
            });
        } else {
          alert("Group Code: " + groupCode + "\nInvite Link: " + inviteLink);
        }
      }

      // Description Management Functions
      function showEditDescription() {
        const modal = getElement("descriptionModal");
        const descriptionInput = getElement("descriptionInput");
        const charCount = getElement("charCount");

        if (modal && descriptionInput && charCount) {
          const currentDescElement = getElement("currentDescription");
          let currentDescription = "";

          if (
            currentDescElement &&
            !currentDescElement.classList.contains("no-description")
          ) {
            currentDescription = currentDescElement.textContent || "";
          }

          descriptionInput.value = currentDescription;
          charCount.textContent = currentDescription.length;
          modal.style.display = "block";
        }
      }

      function hideEditDescription() {
        const modal = getElement("descriptionModal");
        if (modal) {
          modal.style.display = "none";
        }
      }

      async function saveDescription() {
        const descriptionInput = getElement("descriptionInput");
        if (!descriptionInput) return;

        const description = descriptionInput.value.trim();

        try {
          const response = await fetch(`/groups/${groupId}/settings`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ description: description }),
          });

          if (response.ok) {
            const result = await response.json();
            alert("Description updated successfully!");
            hideEditDescription();
            updateDescriptionDisplay(description);
          } else {
            const error = await response.json();
            alert("Error updating description: " + error.error);
          }
        } catch (error) {
          console.error("Error updating description:", error);
          alert("Error updating description");
        }
      }

      function updateDescriptionDisplay(description) {
        const descriptionElement = getElement("currentDescription");
        const editButton = document.querySelector(".btn-edit-description");

        if (descriptionElement) {
          if (description) {
            descriptionElement.textContent = description;
            descriptionElement.classList.remove("no-description");
            const links = descriptionElement.querySelectorAll("a");
            links.forEach((link) => link.remove());
          } else {
            descriptionElement.innerHTML = "No description yet. ";
            if (isAdmin) {
              const addLink = document.createElement("a");
              addLink.href = "javascript:void(0)";
              addLink.onclick = showEditDescription;
              addLink.textContent = "Add a description";
              descriptionElement.appendChild(addLink);
            }
            descriptionElement.classList.add("no-description");
          }
        }

        if (editButton) {
          editButton.textContent = description
            ? "Edit Description"
            : "Add Description";
        }
      }

      // Close modal when clicking outside
      window.onclick = function (event) {
        const modal = getElement("descriptionModal");
        if (event.target === modal) {
          hideEditDescription();
        }
      };

      // Socket initialization
      function initializeSocket() {
        if (typeof io === "undefined") {
          console.error("Socket.io not loaded");
          return;
        }

        socket = io();

        // Send authentication data when connecting
        socket.emit("authenticate", {
          userId: "<%= user._id %>",
          userName: "<%= user.fullName %>",
        });

        socket.emit("join-group", groupId);

        // Timeline events
        socket.on("new-post", (post) => {
          if (typeof addPostToTimeline === "function") {
            addPostToTimeline(post);
          }
        });

        socket.on("new-comment", (data) => {
          if (typeof addCommentToPost === "function") {
            addCommentToPost(data.postId, data.comment);
          }
        });

        socket.on("vote-update", (data) => {
          if (typeof updatePostVotes === "function") {
            updatePostVotes(data.postId, data.votes);
          }
        });

        // Chat event handlers
        socket.on("chat-message", (data) => {
          if (typeof addChatMessage === "function") {
            addChatMessage(data);
          }
        });

        socket.on("chat-history", (messages) => {
          if (typeof renderChatHistory === "function") {
            renderChatHistory(messages);
          }
        });

        socket.on("user-joined-chat", (data) => {
          if (
            typeof addSystemMessage === "function" &&
            typeof updateOnlineCount === "function"
          ) {
            addSystemMessage(`${data.userName} joined the chat`);
            updateOnlineCount(data.onlineCount);
          }
        });

        socket.on("user-left-chat", (data) => {
          if (
            typeof addSystemMessage === "function" &&
            typeof updateOnlineCount === "function"
          ) {
            addSystemMessage(`${data.userName} left the chat`);
            updateOnlineCount(data.onlineCount);
          }
        });

        socket.on("typing-start", (data) => {
          if (typeof showTypingIndicator === "function") {
            showTypingIndicator(data.userName, data.userId);
          }
        });

        socket.on("typing-stop", (data) => {
          if (typeof hideTypingIndicator === "function") {
            hideTypingIndicator(data.userId);
          }
        });

        socket.on("online-count", (count) => {
          if (typeof updateOnlineCount === "function") {
            updateOnlineCount(count);
          }
        });

        // XP System events
        socket.on("group-xp-updated", (data) => {
          updateXpDisplay(data);

          // Show notification for recent XP gains
          if (data.recentXp) {
            showXpNotification(data.recentXp);
          }
        });

        socket.on("group-level-up", (data) => {
          updateXpDisplay(data);
          alert(`üéâ Congratulations! Your group reached Level ${data.level}!`);
        });

        // Mission events
        socket.on("new-mission", (mission) => {
          if (typeof addMissionToList === "function") {
            addMissionToList(mission);
          }
        });

        socket.on("mission-deleted", (data) => {
          if (typeof removeMissionFromList === "function") {
            removeMissionFromList(data.missionId);
          }
        });

        // Add socket event handlers for content management
        socket.on("post-deleted", (data) => {
          // Remove post from timeline if visible
          const postElement = document.querySelector(
            `[data-post-id="${data.postId}"]`
          );
          if (postElement) {
            postElement.remove();
          }
        });

        socket.on("comment-deleted", (data) => {
          // Remove comment from posts if visible
          const commentElement = document.querySelector(
            `[data-comment-id="${data.commentId}"]`
          );
          if (commentElement) {
            commentElement.remove();
          }
        });
      }

      // Initialize when page loads
      document.addEventListener("DOMContentLoaded", function () {
        console.log("DOM loaded, initializing...");

        // Initialize socket
        initializeSocket();

        // Show timeline by default after a short delay to ensure all elements are loaded
        setTimeout(() => {
          showDefaultTab();
        }, 100);

        // Initialize description character count
        const descriptionInput = getElement("descriptionInput");
        if (descriptionInput) {
          descriptionInput.addEventListener("input", function () {
            const charCount = getElement("charCount");
            if (charCount) {
              charCount.textContent = this.value.length;
            }
          });
        }
      });

      // Export functions for use in other modules
      window.completeMission = completeMission;
      window.addGroupXp = addGroupXp;
      window.showXpNotification = showXpNotification;
    </script>
  </body>
</html>
