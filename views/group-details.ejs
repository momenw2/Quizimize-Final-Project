<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title><%= group.name %> - Group Details</title>
    <link rel="stylesheet" href="/groupDetailsStyle.css" />
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <div class="container">
      <div class="header-section">
        <div class="group-summary">
          <h1 class="group-title"><%= group.name %></h1>
          <p class="group-meta">
            Level: <%= group.level || 1 %> | Members: <%= group.members.length
            %>
          </p>
          <p class="group-meta">Specialization: <%= group.specialization %></p>
          <p class="group-meta">
            Created: <%= new Date(group.createdAt).toLocaleDateString() %>
          </p>
        </div>
        <a href="/groups" class="back-btn">‚Üê Back to Groups</a>
      </div>

      <div class="main-grid">
        <div class="content-area">
          <div class="tabs">
            <button class="tab-btn active" onclick="showTab('timeline')">
              Timeline
            </button>
            <button class="tab-btn" onclick="showTab('missions')">
              Missions
            </button>
            <button class="tab-btn" onclick="showTab('stats')">Stats</button>
          </div>

          <div id="timeline" class="tab-content">
            <div class="timeline-header">
              <h3>Group Timeline</h3>
              <button class="btn btn-primary" onclick="showPostForm()">
                Create Post
              </button>
            </div>

            <!-- Post Creation Form -->
            <div id="postForm" class="post-form" style="display: none">
              <textarea
                id="postContent"
                placeholder="What's happening in your group?"
                rows="3"
              ></textarea>
              <div class="form-actions">
                <button class="btn btn-secondary" onclick="hidePostForm()">
                  Cancel
                </button>
                <button class="btn btn-primary" onclick="createPost()">
                  Post
                </button>
              </div>
            </div>

            <!-- Posts Container -->
            <div id="postsContainer" class="posts-container">
              <!-- Posts will be loaded here dynamically -->
            </div>
          </div>

          <div id="missions" class="tab-content" style="display: none">
            <h3>Missions</h3>
            <p>This is where group missions and quests will be displayed.</p>
          </div>
          <div id="stats" class="tab-content" style="display: none">
            <h3>Stats</h3>
            <p>
              This section will show detailed group statistics and analytics.
            </p>
          </div>
        </div>

        <div class="side-panel">
          <div class="members-section">
            <h3>Members (<%= group.members.length %>)</h3>
            <% if (group.members && group.members.length > 0) { %>
            <div class="members-list">
              <% group.members.forEach(function(member, index) { %>
              <div class="member-card">
                <div class="member-info">
                  <h4>
                    <% if (member.user && member.user.fullName) { %> <%=
                    member.user.fullName %> <% } else { %> User <%= index + 1 %>
                    <% } %>
                  </h4>
                  <p>Level: <%= member.user ? member.user.level : "N/A" %></p>
                </div>
                <span class="member-role"><%= member.role %></span>
              </div>
              <% }); %>
            </div>
            <% } else { %>
            <p style="text-align: center; color: #666; font-style: italic">
              No members yet.
            </p>
            <% } %>
            <div class="action-buttons" style="margin-top: 20px">
              <button class="btn btn-primary" onclick="inviteMember()">
                Invite Member
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      let socket;
      const groupId = "<%= group._id %>";

      function showTab(tabId) {
        const tabs = document.querySelectorAll(".tab-content");
        tabs.forEach((tab) => {
          tab.style.display = "none";
        });

        const buttons = document.querySelectorAll(".tab-btn");
        buttons.forEach((btn) => {
          btn.classList.remove("active");
        });

        document.getElementById(tabId).style.display = "block";
        event.currentTarget.classList.add("active");

        if (tabId === "timeline") {
          loadPosts();
        }
      }

      function inviteMember() {
        const groupCode = "<%= group._id.toString().slice(-8).toUpperCase() %>";
        const inviteLink =
          window.location.origin + "/groups/join?code=" + groupCode;

        if (navigator.clipboard) {
          navigator.clipboard
            .writeText(inviteLink)
            .then(() => {
              alert(
                "Invite link copied to clipboard!\\n\\nGroup Code: " + groupCode
              );
            })
            .catch(() => {
              alert(
                "Group Code: " + groupCode + "\\nInvite Link: " + inviteLink
              );
            });
        } else {
          alert("Group Code: " + groupCode + "\\nInvite Link: " + inviteLink);
        }
      }

      // Timeline functionality
      function initializeSocket() {
        socket = io();
        socket.emit("join-group", groupId);

        socket.on("new-post", (post) => {
          addPostToTimeline(post);
        });

        socket.on("new-comment", (data) => {
          addCommentToPost(data.postId, data.comment);
        });

        socket.on("vote-update", (data) => {
          updatePostVotes(data.postId, data.votes);
        });
      }

      async function loadPosts() {
        try {
          const response = await fetch(`/groups/${groupId}/posts`);
          const posts = await response.json();
          renderPosts(posts);
        } catch (error) {
          console.error("Error loading posts:", error);
        }
      }

      function renderPosts(posts) {
        const container = document.getElementById("postsContainer");
        container.innerHTML = posts
          .map(
            (post) => `
          <div class="post-card" data-post-id="${post._id}">
            <div class="post-header">
              <div class="post-author">
                <strong>${post.author.fullName}</strong>
                <span>Level ${post.author.level}</span>
              </div>
              <small>${new Date(post.createdAt).toLocaleString()}</small>
            </div>
            <div class="post-content">${post.content}</div>
            <div class="post-actions">
              <button class="vote-btn" onclick="votePost('${post._id}', 'up')">
                ‚ñ≤ ${post.votes}
              </button>
              <button class="vote-btn" onclick="votePost('${
                post._id
              }', 'down')">‚ñº</button>
              <button class="comment-btn" onclick="toggleComments('${
                post._id
              }')">
                üí¨ ${post.comments ? post.comments.length : 0}
              </button>
            </div>
            <div class="comments-section" id="comments-${
              post._id
            }" style="display: none;">
              <div class="comments-list" id="comments-list-${post._id}">
                ${
                  post.comments
                    ? post.comments
                        .map(
                          (comment) => `
                  <div class="comment">
                    <strong>${comment.author.fullName}</strong>: ${
                            comment.content
                          }
                    <small>${new Date(
                      comment.createdAt
                    ).toLocaleString()}</small>
                  </div>
                `
                        )
                        .join("")
                    : ""
                }
              </div>
              <div class="comment-form">
                <input type="text" id="comment-input-${
                  post._id
                }" placeholder="Write a comment...">
                <button onclick="addComment('${post._id}')">Post</button>
              </div>
            </div>
          </div>
        `
          )
          .join("");
      }

      function showPostForm() {
        document.getElementById("postForm").style.display = "block";
      }

      function hidePostForm() {
        document.getElementById("postForm").style.display = "none";
        document.getElementById("postContent").value = "";
      }

      async function createPost() {
        const content = document.getElementById("postContent").value.trim();
        if (!content) return;

        try {
          const response = await fetch(`/groups/${groupId}/posts`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ content }),
          });

          if (response.ok) {
            const newPost = await response.json(); // Get the created post from response
            addPostToTimeline(newPost); // Add it immediately to the timeline
            hidePostForm();
          } else {
            console.error("Failed to create post");
          }
        } catch (error) {
          console.error("Error creating post:", error);
        }
      }

      async function addComment(postId) {
        const input = document.getElementById(`comment-input-${postId}`);
        const content = input.value.trim();
        if (!content) return;

        const commentButton = input.nextElementSibling;
        const originalText = commentButton.textContent;

        try {
          commentButton.textContent = "Posting...";
          commentButton.disabled = true;

          const response = await fetch(`/groups/posts/${postId}/comments`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ content }),
          });

          const responseData = await response.json();

          if (response.ok) {
            console.log("Comment created successfully:", responseData);
            addCommentToPost(postId, responseData);
            input.value = "";
          } else {
            console.error("Server error response for comment:", responseData);
            alert(
              "Failed to create comment: " +
                (responseData.error || "Unknown error")
            );
          }
        } catch (error) {
          console.error("Network error creating comment:", error);
          alert(
            "Network error creating comment. Please check your connection."
          );
        } finally {
          commentButton.textContent = originalText;
          commentButton.disabled = false;
        }
      }

      async function votePost(postId, voteType) {
        console.log("Voting on post:", postId, "Type:", voteType);

        const voteButton = document.querySelector(
          `[data-post-id="${postId}"] .vote-btn`
        );
        const originalText = voteButton.textContent;

        try {
          // Show loading state
          voteButton.textContent = voteType === "up" ? "‚ñ≤ ..." : "‚ñº ...";
          voteButton.disabled = true;

          const response = await fetch(`/groups/posts/${postId}/vote`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ voteType }),
          });

          const responseData = await response.json();

          if (response.ok) {
            console.log("Vote successful:", responseData);
            // The socket event will handle the UI update
          } else {
            console.error("Server error response for vote:", responseData);
            alert("Failed to vote: " + (responseData.error || "Unknown error"));
          }
        } catch (error) {
          console.error("Network error voting:", error);
          alert("Network error voting. Please check your connection.");
        } finally {
          // The socket event will update the button text, so we don't reset it here
        }
      }

      function toggleComments(postId) {
        const commentsSection = document.getElementById(`comments-${postId}`);
        commentsSection.style.display =
          commentsSection.style.display === "none" ? "block" : "none";
      }

      function addPostToTimeline(post) {
        const container = document.getElementById("postsContainer");
        const postHTML = `
          <div class="post-card" data-post-id="${post._id}">
            <div class="post-header">
              <div class="post-author">
                <strong>${post.author.fullName}</strong>
                <span>Level ${post.author.level}</span>
              </div>
              <small>${new Date(post.createdAt).toLocaleString()}</small>
            </div>
            <div class="post-content">${post.content}</div>
            <div class="post-actions">
              <button class="vote-btn" onclick="votePost('${
                post._id
              }', 'up')">‚ñ≤ 0</button>
              <button class="vote-btn" onclick="votePost('${
                post._id
              }', 'down')">‚ñº</button>
              <button class="comment-btn" onclick="toggleComments('${
                post._id
              }')">Comment (0)</button>
            </div>
            <div class="comments-section" id="comments-${
              post._id
            }" style="display: none;">
              <div class="comments-list" id="comments-list-${post._id}"></div>
              <div class="comment-form">
                <input type="text" id="comment-input-${
                  post._id
                }" placeholder="Write a comment...">
                <button onclick="addComment('${post._id}')">Post</button>
              </div>
            </div>
          </div>
        `;
        container.insertAdjacentHTML("afterbegin", postHTML);
      }

      function addCommentToPost(postId, comment) {
        const commentsList = document.getElementById(`comments-list-${postId}`);
        if (commentsList) {
          const commentHTML = `
            <div class="comment">
              <strong>${comment.author.fullName}</strong>: ${comment.content}
              <small>${new Date(comment.createdAt).toLocaleString()}</small>
            </div>
          `;
          commentsList.insertAdjacentHTML("beforeend", commentHTML);
        }
      }

      function updatePostVotes(postId, votes) {
        const voteBtn = document.querySelector(
          `[data-post-id="${postId}"] .vote-btn`
        );
        if (voteBtn) {
          voteBtn.textContent = `‚ñ≤ ${votes}`;
        }
      }

      // Initialize when page loads
      document.addEventListener("DOMContentLoaded", function () {
        initializeSocket();
        loadPosts();
      });
    </script>
  </body>
</html>
