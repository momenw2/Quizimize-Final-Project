<!-- Dashboard Tab -->
<div id="dashboard" class="tab-content" style="display: none">
  <div class="dashboard-header">
    <h3>Group Dashboard</h3>
    <p>Manage your group settings and members</p>
  </div>

  <div class="dashboard-tabs">
    <button class="dashboard-tab-btn active" onclick="showDashboardSection('members')">
      Members
    </button>
    <button class="dashboard-tab-btn" onclick="showDashboardSection('missions')">
      Missions
    </button>
    <button class="dashboard-tab-btn" onclick="showDashboardSection('content')">
      Content
    </button>
    <button class="dashboard-tab-btn" onclick="showDashboardSection('settings')">
      Group Settings
    </button>
  </div>

  <div class="dashboard-content">
    <!-- Members Section -->
    <div id="dashboard-members" class="dashboard-section active">
      <h4>Member Management</h4>
      <div class="members-management">
        <div class="search-section">
          <input type="text" id="memberSearch" placeholder="Search members..." onkeyup="searchMembers()">
        </div>
        <div id="adminMembersList" class="members-list">
          <!-- Members will be loaded here with admin controls -->
        </div>
        <div class="admin-actions">
          <button class="btn btn-primary" onclick="showInviteModal()">
            Invite New Member
          </button>
          <button class="btn btn-secondary" onclick="exportMembers()">
            Export Members List
          </button>
        </div>
      </div>
    </div>

    <!-- Missions Section -->
    <div id="dashboard-missions" class="dashboard-section">
      <h4>Mission Management</h4>
      <div class="missions-management">
        <div class="missions-stats">
          <div class="stat-card">
            <h5>Active Missions</h5>
            <span id="activeMissionsCount">0</span>
          </div>
          <div class="stat-card">
            <h5>Completed</h5>
            <span id="completedMissionsCount">0</span>
          </div>
          <div class="stat-card">
            <h5>Pending</h5>
            <span id="pendingMissionsCount">0</span>
          </div>
        </div>
        <div class="missions-actions">
          <button class="btn btn-primary" onclick="createNewMission()">
            Create New Mission
          </button>
          <button class="btn btn-secondary" onclick="viewAllMissions()">
            View All Missions
          </button>
        </div>
        <div id="missionsList" class="missions-list">
          <!-- Missions will be loaded here -->
        </div>
      </div>
    </div>

    <!-- Content Section -->
    <div id="dashboard-content" class="dashboard-section">
      <h4>Content Management</h4>
      <div class="content-management">
        <div class="content-stats">
          <div class="stat-card">
            <h5>Total Posts</h5>
            <span id="totalPostsCount">0</span>
          </div>
          <div class="stat-card">
            <h5>This Week</h5>
            <span id="weeklyPostsCount">0</span>
          </div>
          <div class="stat-card">
            <h5>Comments</h5>
            <span id="totalCommentsCount">0</span>
          </div>
        </div>
        
        <div class="content-filters">
          <input type="text" id="contentSearch" placeholder="Search posts and comments..." onkeyup="searchContent()">
          <select id="contentSort" onchange="loadContentManagement()">
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="most-comments">Most Comments</option>
            <option value="most-votes">Most Votes</option>
          </select>
        </div>

        <div class="posts-management">
          <h5>All Posts</h5>
          <div id="adminPostsList" class="admin-posts-list">
            <!-- Posts will be loaded here with admin controls -->
          </div>
        </div>
      </div>
    </div>

    <!-- Group Settings Section -->
    <div id="dashboard-settings" class="dashboard-section">
      <h4>Group Settings</h4>
      <div class="settings-management">
        <form id="groupSettingsForm">
          <div class="form-group">
            <label for="groupName">Group Name</label>
            <input type="text" id="groupName" name="name" value="<%= group.name %>" class="form-control">
          </div>
          
          <div class="form-group">
            <label for="groupSpecialization">Specialization</label>
            <select id="groupSpecialization" name="specialization" class="form-control">
              <option value="JavaScript" <%= group.specialization === 'JavaScript' ? 'selected' : '' %>>JavaScript</option>
              <option value="React" <%= group.specialization === 'React' ? 'selected' : '' %>>React</option>
              <option value="Node.js" <%= group.specialization === 'Node.js' ? 'selected' : '' %>>Node.js</option>
              <option value="Python" <%= group.specialization === 'Python' ? 'selected' : '' %>>Python</option>
              <option value="SQL" <%= group.specialization === 'SQL' ? 'selected' : '' %>>SQL</option>
            </select>
          </div>
          
          <!-- Add Description Field to Settings -->
          <div class="form-group">
            <label for="groupDescription">Group Description</label>
            <textarea 
              id="groupDescription" 
              name="description" 
              class="form-control" 
              rows="4" 
              placeholder="Describe your group's purpose, goals, or any important information..."
              maxlength="500"
            ><%= group.description || '' %></textarea>
            <small class="form-text text-muted">
              <span id="descriptionCharCount"><%= group.description ? group.description.length : 0 %></span>/500 characters
            </small>
          </div>
          
          <div class="form-group">
            <label for="groupVisibility">Group Visibility</label>
            <select id="groupVisibility" name="visibility" class="form-control">
              <option value="public">Public</option>
              <option value="private">Private</option>
              <option value="invite-only">Invite Only</option>
            </select>
          </div>
          
          <div class="form-group">
            <label>
              <input type="checkbox" name="allowMemberPosts" checked> 
              Allow members to create posts
            </label>
          </div>
          
          <div class="form-group">
            <label>
              <input type="checkbox" name="allowMemberInvites" checked> 
              Allow members to invite others
            </label>
          </div>
          
          <div class="form-actions">
            <button type="button" class="btn btn-primary" onclick="saveGroupSettings()">
              Save Settings
            </button>
            <button type="button" class="btn btn-danger" onclick="showDeleteGroupModal()">
              Delete Group
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  // Dashboard-specific JavaScript
  let currentDashboardSection = 'members';

  function showDashboardSection(sectionId) {
    // Hide all sections
    const sections = document.querySelectorAll(".dashboard-section");
    sections.forEach((section) => {
      section.classList.remove("active");
    });

    // Remove active class from all buttons
    const buttons = document.querySelectorAll(".dashboard-tab-btn");
    buttons.forEach((btn) => {
      btn.classList.remove("active");
    });

    // Show selected section and activate button
    const selectedSection = getElement(`dashboard-${sectionId}`);
    if (selectedSection) {
      selectedSection.classList.add("active");
    }
    
    if (event && event.currentTarget) {
      event.currentTarget.classList.add("active");
    }
    
    currentDashboardSection = sectionId;
    
    // Load section-specific data
    switch(sectionId) {
      case 'members':
        loadMembersManagement();
        break;
      case 'missions':
        loadMissionsManagement();
        break;
      case 'content':
        loadContentManagement();
        break;
      case 'settings':
        loadGroupSettings();
        break;
    }
  }

  async function loadDashboardData() {
    if (!isAdmin) return;
    
    try {
      const response = await fetch(`/groups/${groupId}/dashboard`);
      const data = await response.json();
      
      if (response.ok) {
        updateDashboardStats(data.stats);
        if (currentDashboardSection === 'members') {
          loadMembersManagement();
        }
      } else {
        console.error('Failed to load dashboard data:', data.error);
      }
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    }
  }

  function updateDashboardStats(stats) {
    if (!stats) return;
    
    const totalPosts = getElement('totalPostsCount');
    const weeklyPosts = getElement('weeklyPostsCount');
    const totalComments = getElement('totalCommentsCount');
    
    if (totalPosts) totalPosts.textContent = stats.totalPosts || 0;
    if (weeklyPosts) weeklyPosts.textContent = stats.weeklyPosts || 0;
    if (totalComments) totalComments.textContent = stats.totalComments || 0;
  }

  async function loadMembersManagement() {
    if (!isAdmin) return;
    
    try {
      const response = await fetch(`/groups/${groupId}/members`);
      const members = await response.json();
      
      const membersList = getElement('adminMembersList');
      if (membersList && members) {
        membersList.innerHTML = members.map(member => `
          <div class="member-management-card">
            <div class="member-info">
              <h5>${member.user?.fullName || 'Unknown User'}</h5>
              <p>Level: ${member.user?.level || 'N/A'} | Role: ${member.role}</p>
              <small>Joined: ${new Date(member.joinedAt || Date.now()).toLocaleDateString()}</small>
            </div>
            <div class="member-actions">
              <select onchange="updateMemberRole('${member.user?._id}', this.value)" ${member.role === 'Admin' ? 'disabled' : ''}>
                <option value="Member" ${member.role === 'Member' ? 'selected' : ''}>Member</option>
                <option value="Contributor" ${member.role === 'Contributor' ? 'selected' : ''}>Contributor</option>
                <option value="Strategist" ${member.role === 'Strategist' ? 'selected' : ''}>Strategist</option>
                <option value="Challenger" ${member.role === 'Challenger' ? 'selected' : ''}>Challenger</option>
                <option value="Admin" ${member.role === 'Admin' ? 'selected' : ''}>Admin</option>
              </select>
              <button class="btn btn-sm btn-danger" onclick="removeMember('${member.user?._id}')" ${member.role === 'Admin' ? 'disabled' : ''}>
                Remove
              </button>
            </div>
          </div>
        `).join('');
      }
    } catch (error) {
      console.error('Error loading members:', error);
    }
  }

  async function updateMemberRole(userId, newRole) {
    if (!isAdmin || !userId) return;
    
    try {
      const response = await fetch(`/groups/${groupId}/members/${userId}/role`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ role: newRole })
      });
      
      if (response.ok) {
        alert('Member role updated successfully');
        loadMembersManagement();
      } else {
        const error = await response.json();
        alert('Error updating role: ' + error.error);
      }
    } catch (error) {
      console.error('Error updating member role:', error);
      alert('Error updating member role');
    }
  }

  async function removeMember(userId) {
    if (!isAdmin || !userId) return;
    if (!confirm('Are you sure you want to remove this member?')) return;
    
    try {
      const response = await fetch(`/groups/${groupId}/members/${userId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        alert('Member removed successfully');
        loadMembersManagement();
      } 
      else {
        const error = await response.json();
        }
    }
      catch (error) {
        console.error('Error removing member:', error);
        alert('Error removing member');
        }
    }

  async function saveGroupSettings() {
    if (!isAdmin) return;
    
    const form = getElement('groupSettingsForm');
    if (!form) return;
    
    const formData = new FormData(form);
    const settings = Object.fromEntries(formData.entries());
    
    try {
      const response = await fetch(`/groups/${groupId}/settings`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(settings)
      });
      
      if (response.ok) {
        alert('Group settings updated successfully');
        // Update the description display if it was changed
        if (settings.description !== undefined) {
          updateDescriptionDisplay(settings.description);
        }
      } else {
        const error = await response.json();
        alert('Error updating settings: ' + error.error);
      }
    } catch (error) {
      console.error('Error updating group settings:', error);
      alert('Error updating group settings');
    }
  }

  function loadGroupSettings() {
    // Settings are already pre-populated in the HTML
    console.log('Loading group settings...');
    
    // Initialize settings description character count
    const groupDescription = getElement('groupDescription');
    if (groupDescription) {
      groupDescription.addEventListener('input', function() {
        const charCount = getElement('descriptionCharCount');
        if (charCount) {
          charCount.textContent = this.value.length;
        }
      });
    }
  }

  function loadMissionsManagement() {
    console.log('Loading missions management...');
    // Implement missions management
  }

  // Content Management Functions
  async function loadContentManagement() {
    if (!isAdmin) return;
    
    try {
      const sortBy = document.getElementById('contentSort')?.value || 'newest';
      const response = await fetch(`/groups/${groupId}/dashboard/content?sort=${sortBy}`);
      const data = await response.json();
      
      if (response.ok) {
        renderAdminPosts(data.posts);
      } else {
        console.error('Failed to load content:', data.error);
      }
    } catch (error) {
      console.error('Error loading content:', error);
    }
  }

  function renderAdminPosts(posts) {
    const container = document.getElementById('adminPostsList');
    if (!container) return;

    if (!posts || posts.length === 0) {
      container.innerHTML = `
        <div class="empty-state">
          <i>📝</i>
          <p>No posts found in this group</p>
        </div>
      `;
      return;
    }

    container.innerHTML = posts.map(post => `
      <div class="admin-post-card" data-post-id="${post._id}">
        <div class="admin-post-header">
          <div class="post-author-info">
            <h6>${post.author?.fullName || 'Unknown User'}</h6>
            <div class="post-meta">
              ${new Date(post.createdAt).toLocaleString()} | 
              Level ${post.author?.level || 'N/A'}
            </div>
          </div>
          <div class="post-stats">
            <span>▲ ${post.votes || 0}</span>
            <span>💬 ${post.comments ? post.comments.length : 0}</span>
          </div>
        </div>
        
        <div class="post-content">
          ${post.content}
        </div>
        
        <div class="post-actions-admin">
          <button class="btn btn-sm btn-danger" onclick="deletePost('${post._id}')">
            Delete Post
          </button>
          <button class="btn btn-sm btn-secondary" onclick="toggleCommentsAdmin('${post._id}')">
            ${post.comments && post.comments.length > 0 ? `Manage Comments (${post.comments.length})` : 'No Comments'}
          </button>
        </div>
        
        <div class="admin-comments-section" id="admin-comments-${post._id}" style="display: none;">
          <h6>Comments</h6>
          <div id="admin-comments-list-${post._id}">
            ${renderAdminComments(post.comments)}
          </div>
        </div>
      </div>
    `).join('');
  }

  function renderAdminComments(comments) {
    if (!comments || comments.length === 0) {
      return '<p class="no-comments">No comments yet</p>';
    }

    return comments.map(comment => `
      <div class="comment-item" data-comment-id="${comment._id}">
        <div class="comment-header">
          <span class="comment-author">${comment.author?.fullName || 'Unknown User'}</span>
          <span class="comment-meta">
            ${new Date(comment.createdAt).toLocaleString()} | 
            Level ${comment.author?.level || 'N/A'}
          </span>
        </div>
        <div class="comment-content">${comment.content}</div>
        <div class="comment-actions">
          <button class="btn btn-sm btn-danger" onclick="deleteComment('${comment._id}', '${comment.postId}')">
            Delete Comment
          </button>
        </div>
      </div>
    `).join('');
  }

  function toggleCommentsAdmin(postId) {
    const commentsSection = document.getElementById(`admin-comments-${postId}`);
    if (commentsSection) {
      commentsSection.style.display = commentsSection.style.display === 'none' ? 'block' : 'none';
    }
  }

  async function deletePost(postId) {
    if (!isAdmin || !confirm('Are you sure you want to delete this post? This will also delete all comments and cannot be undone.')) {
      return;
    }

    try {
      const response = await fetch(`/groups/posts/${postId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        alert('Post deleted successfully');
        loadContentManagement(); // Reload the content
      } else {
        const error = await response.json();
        alert('Error deleting post: ' + error.error);
      }
    } catch (error) {
      console.error('Error deleting post:', error);
      alert('Error deleting post');
    }
  }

  async function deleteComment(commentId, postId) {
    if (!isAdmin || !confirm('Are you sure you want to delete this comment?')) {
      return;
    }

    try {
      const response = await fetch(`/groups/comments/${commentId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        alert('Comment deleted successfully');
        // Refresh the comments for this post
        loadContentManagement();
      } else {
        const error = await response.json();
        alert('Error deleting comment: ' + error.error);
      }
    } catch (error) {
      console.error('Error deleting comment:', error);
      alert('Error deleting comment');
    }
  }

  function searchContent() {
    const searchTerm = document.getElementById('contentSearch')?.value.toLowerCase();
    const postCards = document.querySelectorAll('.admin-post-card');
    
    postCards.forEach(card => {
      const content = card.querySelector('.post-content')?.textContent.toLowerCase() || '';
      const author = card.querySelector('.post-author-info h6')?.textContent.toLowerCase() || '';
      const comments = card.querySelector('.admin-comments-section')?.textContent.toLowerCase() || '';
      
      const matches = content.includes(searchTerm) || 
                    author.includes(searchTerm) || 
                    comments.includes(searchTerm);
      
      card.style.display = matches ? 'block' : 'none';
    });
  }

  // Stub functions for dashboard actions
  function searchMembers() {
    console.log('Searching members...');
  }

  function showInviteModal() {
    alert('Invite modal would open here');
  }

  function exportMembers() {
    alert('Export members functionality');
  }

  function createNewMission() {
    alert('Create new mission functionality');
  }

  function viewAllMissions() {
    alert('View all missions functionality');
  }

  function showDeleteGroupModal() {
    if (confirm('Are you sure you want to delete this group? This action cannot be undone.')) {
      alert('Group deletion functionality');
    }
  }
</script>