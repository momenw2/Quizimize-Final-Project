<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Group Missions</title>
  </head>
  <body>
    <!-- Toast Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
      <div class="loading-spinner">
        <span id="loadingMessage">Loading...</span>
      </div>
    </div>

    <!-- Missions Tab -->
    <div id="missions" class="tab-content active">
      <div class="missions-header">
        <h3>Group Missions</h3>
      </div>

      <div class="missions-container">
        <div class="missions-stats">
          <div class="stat-card">
            <h5>Active Missions</h5>
            <span id="activeMissions">0</span>
          </div>
          <div class="stat-card">
            <h5>Completed</h5>
            <span id="completedMissions">0</span>
          </div>
          <div class="stat-card">
            <h5>Members Participating</h5>
            <span id="participatingMembers">0</span>
          </div>
        </div>

        <div id="missionsList" class="missions-list">
          <!-- Missions will be loaded here -->
        </div>
      </div>
    </div>

    <script>
      // Global variables - make sure these don't conflict with other scripts
      let currentMissionId = null;
      let currentQuestions = [];
      let currentQuestionIndex = 0;

      // Get user and group IDs from server-side rendering
      const missionUserId = '<%= user ? user._id : "current_user" %>';
      const missionGroupId = '<%= group ? group._id : "group_id" %>';

      // Toast Notification System
      function showToast(message, type = "info", duration = 4000) {
        const toastContainer = getElement("toastContainer");
        const toast = document.createElement("div");
        toast.className = `toast ${type}`;
        toast.innerHTML = `
          <div class="toast-message">${message}</div>
          <button class="toast-close" onclick="this.parentElement.remove()">&times;</button>
        `;

        toastContainer.appendChild(toast);

        // Auto remove after duration
        setTimeout(() => {
          if (toast.parentElement) {
            toast.style.animation = "slideOut 0.3s ease-out";
            setTimeout(() => {
              if (toast.parentElement) {
                toast.remove();
              }
            }, 300);
          }
        }, duration);
      }

      // Loading Overlay System
      function showLoading(message = "Loading...") {
        const overlay = getElement("loadingOverlay");
        const messageEl = getElement("loadingMessage");
        messageEl.textContent = message;
        overlay.style.display = "flex";
      }

      function hideLoading() {
        const overlay = getElement("loadingOverlay");
        overlay.style.display = "none";
      }

      // Missions-specific JavaScript
      async function loadMissions() {
        try {
          const response = await fetch(`/groups/${missionGroupId}/missions`);
          const missions = await response.json();
          renderMissions(missions);
          updateMissionStats(missions);
        } catch (error) {
          console.error("Error loading missions:", error);
          showToast("Failed to load missions", "error");
        }
      }

      function updateMissionStats(missions) {
        const activeMissions = missions.filter(
          (mission) => mission.status === "active"
        ).length;
        const completedMissions = missions.filter(
          (mission) => mission.status === "completed"
        ).length;

        // Calculate participating members
        const participatingMembers = missions.reduce((total, mission) => {
          return (
            total + (mission.participants ? mission.participants.length : 0)
          );
        }, 0);

        getElement("activeMissions").textContent = activeMissions;
        getElement("completedMissions").textContent = completedMissions;
        getElement("participatingMembers").textContent = participatingMembers;
      }

      function renderMissions(missions) {
        const container = getElement("missionsList");
        if (container && missions) {
          if (missions.length === 0) {
            container.innerHTML = `
                        <div class="empty-state">
                            <i>üéØ</i>
                            <p>No missions yet. Create your first mission!</p>
                        </div>
                    `;
            return;
          }

          container.innerHTML = missions
            .map((mission) => {
              const hasJoined =
                mission.participants &&
                mission.participants.some(
                  (p) =>
                    p.user._id === missionUserId || p.user === missionUserId
                );
              const isCompleted =
                mission.participants &&
                mission.participants.some(
                  (p) =>
                    (p.user._id === missionUserId ||
                      p.user === missionUserId) &&
                    p.completed
                );
              const participant =
                mission.participants &&
                mission.participants.find(
                  (p) =>
                    p.user._id === missionUserId || p.user === missionUserId
                );

              return `
                            <div class="mission-card" data-mission-id="${
                              mission._id
                            }">
                                <div class="mission-header">
                                    <h4>${mission.title}</h4>
                                    <div class="mission-status-container">
                                        ${
                                          hasJoined
                                            ? `
                                            <span class="mission-participant-badge ${
                                              isCompleted
                                                ? "completed"
                                                : "in-progress"
                                            }">
                                                ${
                                                  isCompleted
                                                    ? "‚úÖ Completed"
                                                    : "üü° In Progress"
                                                }
                                            </span>
                                        `
                                            : ""
                                        }
                                        <span class="mission-status ${
                                          mission.status
                                        }">${mission.status}</span>
                                    </div>
                                </div>
                                <div class="mission-content">
                                    <p>${
                                      mission.description ||
                                      "No description provided."
                                    }</p>
                                    <div class="mission-meta">
                                        <div class="mission-info">
                                            <span class="info-item">
                                                <i>‚≠ê</i>
                                                ${mission.points} Points
                                            </span>
                                            <span class="info-item">
                                                <i>‚ùì</i>
                                                ${
                                                  mission.type === "custom"
                                                    ? mission.questions.length
                                                    : mission.duration * 5
                                                } Questions
                                            </span>
                                            ${
                                              mission.deadline
                                                ? `
                                                <span class="info-item">
                                                    <i>‚è∞</i>
                                                    ${formatDeadline(
                                                      mission.deadline
                                                    )}
                                                </span>
                                            `
                                                : ""
                                            }
                                            <span class="info-item">
                                                <i>üë•</i>
                                                ${
                                                  mission.participants
                                                    ? mission.participants
                                                        .length
                                                    : 0
                                                } Participants
                                            </span>
                                            ${
                                              participant &&
                                              participant.score !== undefined
                                                ? `
                                                <span class="info-item">
                                                    <i>üèÜ</i>
                                                    Your Score: ${participant.score}/${mission.points}
                                                </span>
                                            `
                                                : ""
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="mission-actions">
                                    ${
                                      hasJoined
                                        ? `
                                        ${
                                          isCompleted
                                            ? `
                                            <button class="btn btn-success" onclick="viewMissionResults('${mission._id}')">
                                                View Results
                                            </button>
                                        `
                                            : `
                                            <button class="btn btn-primary" onclick="continueMission('${
                                              mission._id
                                            }')">
                                                ${
                                                  participant &&
                                                  participant.currentQuestion >
                                                    0
                                                    ? "Continue"
                                                    : "Start"
                                                } Mission
                                            </button>
                                        `
                                        }
                                    `
                                        : `
                                        <button class="btn btn-primary" onclick="joinMission('${mission._id}')">
                                            Join Mission
                                        </button>
                                    `
                                    }
                                    <button class="btn btn-secondary" onclick="viewMissionDetails('${
                                      mission._id
                                    }')">
                                        Details
                                    </button>
                                </div>
                            </div>
                        `;
            })
            .join("");
        }
      }

      async function joinMission(missionId) {
        try {
          showLoading("Joining mission...");

          const response = await fetch(
            `/groups/${missionGroupId}/missions/${missionId}/join`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          if (response.ok) {
            const result = await response.json();
            showToast("Successfully joined the mission!", "success");
            loadMissions(); // Reload missions to update UI
            setTimeout(() => startMission(missionId), 1000); // Start the mission after a brief delay
          } else {
            const error = await response.json();
            showToast(error.error, "error");
          }
        } catch (error) {
          console.error("Error joining mission:", error);
          showToast("Error joining mission", "error");
        } finally {
          hideLoading();
        }
      }

      async function continueMission(missionId) {
        await startMission(missionId);
      }

      async function startMission(missionId) {
        try {
          showLoading("Loading mission questions...");

          const response = await fetch(
            `/groups/${missionGroupId}/missions/${missionId}/questions`
          );

          if (!response.ok) {
            const error = await response.json();
            showToast(error.error, "error");
            return;
          }

          const data = await response.json();
          currentMissionId = missionId;
          currentQuestions = data.questions;
          currentQuestionIndex = data.currentQuestion;

          showMissionInterface();
          displayCurrentQuestion();
        } catch (error) {
          console.error("Error starting mission:", error);
          showToast("Error starting mission", "error");
        } finally {
          hideLoading();
        }
      }

      function showMissionInterface() {
        // Hide missions list and show mission interface
        getElement("missionsList").style.display = "none";
        getElement("missions").querySelector(".missions-header").style.display =
          "none";
        getElement("missions").querySelector(".missions-stats").style.display =
          "none";

        // Create mission interface if it doesn't exist
        if (!getElement("missionInterface")) {
          const missionInterface = document.createElement("div");
          missionInterface.id = "missionInterface";
          missionInterface.className = "mission-interface";
          missionInterface.innerHTML = `
                    <div class="mission-quiz-container">
                        <div class="quiz-header">
                            <button class="btn btn-back" onclick="hideMissionInterface()">‚Üê Back to Missions</button>
                            <h3 id="missionQuizTitle">Mission Quiz</h3>
                            <div class="quiz-progress">
                                Question <span id="currentQuestionNum">1</span> of <span id="totalQuestions">0</span>
                            </div>
                        </div>
                        <div class="quiz-content">
                            <div id="scoreDisplay" class="score-display" style="display: none;">
                                Current Score: <span id="currentScore">0</span> points
                            </div>
                            <div class="question-card">
                                <h4 id="questionText">Question text will appear here</h4>
                                <div id="choicesContainer" class="choices-container">
                                    <!-- Choices will be populated here -->
                                </div>
                            </div>
                            <div class="quiz-actions">
                                <button id="nextButton" class="btn btn-primary" onclick="nextQuestion()" style="display: none;">
                                    Next Question
                                </button>
                            </div>
                        </div>
                    </div>
                `;
          getElement("missions").appendChild(missionInterface);
        }

        getElement("missionInterface").style.display = "block";
      }

      function hideMissionInterface() {
        if (getElement("missionInterface")) {
          getElement("missionInterface").style.display = "none";
        }
        getElement("missionsList").style.display = "block";
        getElement("missions").querySelector(".missions-header").style.display =
          "flex";
        getElement("missions").querySelector(".missions-stats").style.display =
          "grid";
        currentMissionId = null;
        currentQuestions = [];
        currentQuestionIndex = 0;
      }

      function displayCurrentQuestion() {
        if (currentQuestionIndex >= currentQuestions.length) {
          // Mission completed
          showMissionCompleted();
          return;
        }

        const question = currentQuestions[currentQuestionIndex];

        getElement(
          "missionQuizTitle"
        ).textContent = `Mission: ${currentMissionId}`;
        getElement("currentQuestionNum").textContent = currentQuestionIndex + 1;
        getElement("totalQuestions").textContent = currentQuestions.length;
        getElement("questionText").textContent = question.text;

        const choicesContainer = getElement("choicesContainer");
        choicesContainer.innerHTML = "";

        question.choices.forEach((choice, index) => {
          const choiceElement = document.createElement("button");
          choiceElement.className = "choice-btn";
          choiceElement.innerHTML = `
                    <span class="choice-letter">${String.fromCharCode(
                      65 + index
                    )}</span>
                    <span class="choice-text">${choice}</span>
                `;
          choiceElement.onclick = () => selectAnswer(index);
          choicesContainer.appendChild(choiceElement);
        });

        getElement("nextButton").style.display = "none";

        // Load current score
        loadCurrentScore();
      }

      async function loadCurrentScore() {
        try {
          const response = await fetch(
            `/groups/${missionGroupId}/missions/${currentMissionId}/progress`
          );
          if (response.ok) {
            const data = await response.json();
            getElement("currentScore").textContent = data.progress.score;
            getElement("scoreDisplay").style.display = "block";
          }
        } catch (error) {
          console.error("Error loading score:", error);
        }
      }

      async function selectAnswer(selectedIndex) {
        try {
          // Disable all choice buttons
          const choiceButtons = document.querySelectorAll(".choice-btn");
          choiceButtons.forEach((button) => {
            button.disabled = true;
          });

          const response = await fetch(
            `/groups/${missionGroupId}/missions/${currentMissionId}/answer`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                questionIndex: currentQuestionIndex,
                selectedAnswer: selectedIndex,
              }),
            }
          );

          if (!response.ok) {
            const error = await response.json();
            showToast(error.error, "error");
            return;
          }

          const result = await response.json();

          // Show feedback
          choiceButtons.forEach((button, index) => {
            if (index === result.correctAnswer) {
              button.classList.add("correct");
            } else if (index === selectedIndex && !result.isCorrect) {
              button.classList.add("incorrect");
            }
          });

          // Show explanation if available
          if (result.explanation) {
            const explanationDiv = document.createElement("div");
            explanationDiv.className = "explanation";
            explanationDiv.innerHTML = `<strong>Explanation:</strong> ${result.explanation}`;
            getElement("choicesContainer").appendChild(explanationDiv);
          }

          // Update score display
          getElement("currentScore").textContent = result.currentScore;

          getElement("nextButton").style.display = "block";

          if (result.completed) {
            getElement("nextButton").textContent = "Complete Mission";
            getElement("nextButton").onclick = showMissionCompleted;

            // Auto-complete after 3 seconds
            setTimeout(() => {
              if (getElement("nextButton").textContent === "Complete Mission") {
                showMissionCompleted();
              }
            }, 3000);
          } else {
            currentQuestionIndex = result.nextQuestion;
            getElement("nextButton").textContent = "Next Question";
            getElement("nextButton").onclick = nextQuestion;
          }
        } catch (error) {
          console.error("Error submitting answer:", error);
          showToast("Error submitting answer", "error");
        }
      }

      function nextQuestion() {
        displayCurrentQuestion();
      }

      async function showMissionCompleted() {
        try {
          showLoading("Calculating your rewards...");

          // Get the final mission progress to calculate XP
          const progressResponse = await fetch(
            `/groups/${missionGroupId}/missions/${currentMissionId}/progress`
          );

          if (progressResponse.ok) {
            const progressData = await progressResponse.json();

            // Calculate total points earned (mission points based on score percentage)
            const scorePercentage =
              (progressData.progress.score / progressData.mission.points) * 100;
            const pointsEarned = Math.floor(
              (scorePercentage / 100) * progressData.mission.points
            );

            // Add XP reward to group (50% of mission points)
            const xpResponse = await fetch(
              `/groups/${missionGroupId}/missions/${currentMissionId}/complete`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  score: progressData.progress.score,
                  totalPoints: pointsEarned,
                }),
              }
            );

            if (xpResponse.ok) {
              const xpResult = await xpResponse.json();
              showToast(
                `Mission completed! You earned ${pointsEarned} points and ${xpResult.xpReward} XP for the group!`,
                "success"
              );
            } else {
              showToast(
                "Mission completed! Could not add XP reward.",
                "warning"
              );
            }
          }
        } catch (error) {
          console.error("Error completing mission:", error);
          showToast("Mission completed! Error calculating rewards.", "warning");
        } finally {
          hideLoading();
          hideMissionInterface();
          loadMissions(); // Reload to update status
        }
      }

      function viewMissionResults(missionId) {
        // Implement view mission results
        showToast("Loading mission results...", "info");
        // You can implement a detailed results view here
      }

      function formatDeadline(deadline) {
        const deadlineDate = new Date(deadline);
        const now = new Date();
        const diffTime = deadlineDate - now;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays < 0) {
          return "Expired";
        } else if (diffDays === 0) {
          return "Today";
        } else if (diffDays === 1) {
          return "Tomorrow";
        } else if (diffDays <= 7) {
          return `${diffDays} days left`;
        } else {
          return deadlineDate.toLocaleDateString();
        }
      }

      function createNewMission() {
        showToast(
          "Create new mission functionality - would open a modal",
          "info"
        );
        // You can implement a modal for creating new missions here
      }

      function viewMissionDetails(missionId) {
        console.log("Viewing mission details:", missionId);
        showToast("Loading mission details...", "info");
        // Implement view mission details logic
        // This could show a modal with detailed mission information
      }

      // Utility functions
      function getElement(id) {
        return document.getElementById(id);
      }

      // Socket initialization (if needed)
      function initializeSocket() {
        // Only initialize if socket.io is available
        if (typeof io !== "undefined") {
          const socket = io();
          // Add socket event listeners here if needed
          socket.on("new-mission", (mission) => {
            showToast("New mission created!", "info");
            loadMissions(); // Reload missions when new one is created
          });

          socket.on("mission-deleted", (data) => {
            showToast("Mission deleted", "info");
            loadMissions(); // Reload missions when one is deleted
          });
        }
      }

      // Initialize when DOM is loaded
      document.addEventListener("DOMContentLoaded", function () {
        console.log("DOM loaded, initializing missions...");
        initializeSocket();
        // Load missions initially if we're on the missions tab
        if (document.getElementById("missions").classList.contains("active")) {
          loadMissions();
        }
      });
    </script>
  </body>
</html>
